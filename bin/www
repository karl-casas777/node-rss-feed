#!/usr/bin/env node

/**
 * Module dependencies.
 */
var severInit = function (listen) {
  var app = require('../app');
  var debug = require('debug')('node-rss-feed:server');
  var http = require('http');
  var utility = require('../modules/utility');

  /**
   * Get port from environment and store in Express.
   */

  var port = utility.normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);
  var io = require('../modules/rss-aggregator')(server);

  /**
   * Listen on provided port, on all network interfaces.
   */

  if (listen) server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

  return server;
};

if (module.parent === null) {
  severInit(true);
  var rssFeeds = require('../modules/rss-feeds');
  rssFeeds.autoUpdate(true);
} 
else module.exports = severInit;
